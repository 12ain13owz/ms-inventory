{"version":3,"sources":["src/app/modules/auth/auth.component.ts","src/app/modules/auth/auth.component.html","src/app/modules/auth/constants/forgot-password.constant.ts","src/app/modules/auth/components/forgot-password/forgot-password.component.ts","src/app/modules/auth/components/forgot-password/forgot-password.component.html","src/app/modules/auth/guards/auth.guard.ts","node_modules/ng-recaptcha/fesm2022/ng-recaptcha.mjs","src/app/modules/auth/constants/login.constant.ts","src/app/modules/auth/components/login/login.component.ts","src/app/modules/auth/components/login/login.component.html","src/app/modules/auth/auth.routes.ts","src/app/modules/auth/auth.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrl: './auth.component.scss'\r\n})\r\nexport class AuthComponent {\r\n\r\n}\r\n","<div class=\"view\">\r\n  <div class=\"rgba-stylish-strong\"></div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n","export const FORGOT_PASSWORD = {\r\n  patternPassword:\r\n    /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$ %^&*-]).{8,}$/,\r\n\r\n  validationField: {\r\n    email: {\r\n      required: 'กรุณาระบุ E-mail',\r\n      email: 'กรุณาระบุ E-mail ให้ถูกต้อง (example@gmail.com)',\r\n    },\r\n\r\n    passwordResetCode: {\r\n      required: 'กรุณาระบุ รหัสยืนยัน',\r\n      length: 'กรุณาระบุให้ครบ 8 ตัวอักษร',\r\n    },\r\n\r\n    newPassword: {\r\n      required: 'กรุณาระบุ New password',\r\n      pattern:\r\n        'ต้องมีตัวเล็ก, ตัวใหญ่, ตัวเลข, อักษรพิเศษ และไม่ต่ำกว่า 8 ตัวอักษร',\r\n    },\r\n\r\n    confirmPassword: {\r\n      required: 'กรุณาระบุ Confirm password',\r\n      match: 'Password ไม่ตรงกัน',\r\n    },\r\n  },\r\n};\r\n","import { Component, ViewChild, inject } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { ValidationService } from '../../../shared/services/validation.service';\r\nimport { FORGOT_PASSWORD } from '../../constants/forgot-password.constant';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { AuthApiService } from '../../services/auth-api.service';\r\nimport { catchError, concatMap, finalize, of } from 'rxjs';\r\nimport { ResetPasswordPayload } from '../../models/forgot-password';\r\nimport { ToastNotificationService } from '../../../../core/services/toast-notification.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrl: './forgot-password.component.scss',\r\n})\r\nexport class ForgotPasswordComponent {\r\n  @ViewChild('stepper') stepper: MatStepper;\r\n\r\n  private formBuilder = inject(FormBuilder);\r\n  private authApiService = inject(AuthApiService);\r\n  private validationService = inject(ValidationService);\r\n  private toastService = inject(ToastNotificationService);\r\n  private id: number;\r\n\r\n  validationField = FORGOT_PASSWORD.validationField;\r\n  patternPassword = FORGOT_PASSWORD.patternPassword;\r\n  isLoading: boolean = false;\r\n  hideNewPassword: boolean = true;\r\n  hideConfirmPassword: boolean = true;\r\n\r\n  formEmail = this.initFormEmail();\r\n  formVerified = this.initFormVerified();\r\n  formResetPassword = this.initFormResetPassword();\r\n\r\n  onSubmitEmail(): void {\r\n    if (this.formEmail.invalid) return;\r\n    const email = this.formEmail.getRawValue().email;\r\n\r\n    this.isLoading = true;\r\n    this.authApiService\r\n      .forgetPassword(email)\r\n      .pipe(finalize(() => (this.isLoading = false)))\r\n      .subscribe((res) => {\r\n        this.id = res.id;\r\n        this.stepper.next();\r\n      });\r\n  }\r\n\r\n  onSubmitVerified(): void {\r\n    if (this.formVerified.invalid) return;\r\n    this.stepper.next();\r\n  }\r\n\r\n  onSubmitResetPassword(): void {\r\n    if (this.formResetPassword.invalid) return;\r\n    const payload: ResetPasswordPayload = {\r\n      passwordResetCode: this.formVerified.getRawValue().passwordResetCode,\r\n      newPassword: this.formResetPassword.getRawValue().newPassword,\r\n      confirmPassword: this.formResetPassword.getRawValue().confirmPassword,\r\n    };\r\n\r\n    this.isLoading = true;\r\n    this.authApiService\r\n      .resetPassword(this.id, payload)\r\n      .pipe(\r\n        concatMap((res) => {\r\n          this.toastService.success('Success', res.message);\r\n          return this.authApiService.logout().pipe(catchError(() => of(null)));\r\n        }),\r\n        finalize(() => (this.isLoading = false))\r\n      )\r\n      .subscribe();\r\n  }\r\n\r\n  get email(): FormControl<string> {\r\n    return this.formEmail.controls['email'];\r\n  }\r\n\r\n  get passwordResetCode(): FormControl<string> {\r\n    return this.formVerified.controls['passwordResetCode'];\r\n  }\r\n\r\n  get newPassword(): FormControl<string> {\r\n    return this.formResetPassword.controls['newPassword'];\r\n  }\r\n\r\n  get confirmPassword(): FormControl<string> {\r\n    return this.formResetPassword.controls['confirmPassword'];\r\n  }\r\n\r\n  private initFormEmail() {\r\n    return this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n    });\r\n  }\r\n\r\n  private initFormVerified() {\r\n    return this.formBuilder.nonNullable.group({\r\n      passwordResetCode: [\r\n        '',\r\n        [Validators.required, Validators.minLength(8), Validators.maxLength(8)],\r\n      ],\r\n    });\r\n  }\r\n\r\n  private initFormResetPassword() {\r\n    return this.formBuilder.nonNullable.group(\r\n      {\r\n        newPassword: [\r\n          '',\r\n          [Validators.required, Validators.pattern(this.patternPassword)],\r\n        ],\r\n        confirmPassword: [''],\r\n      },\r\n      {\r\n        validators: this.validationService.comparePassword.bind(this, [\r\n          'newPassword',\r\n          'confirmPassword',\r\n        ]),\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"forgot-wrapper\">\r\n  <div class=\"forgot-box dark-theme\">\r\n    @if (isLoading) {\r\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n    }\r\n\r\n    <img src=\"assets/images/logo-bsru.png\" alt=\"logo\" />\r\n    <h1>ลืมรหัสผ่าน ?</h1>\r\n\r\n    <div style=\"margin-inline: -24px\">\r\n      <mat-stepper labelPosition=\"bottom\" linear=\"true\" #stepper>\r\n        <mat-step [stepControl]=\"formEmail\">\r\n          <form [formGroup]=\"formEmail\" (ngSubmit)=\"onSubmitEmail()\">\r\n            <ng-template matStepLabel>E-mail</ng-template>\r\n\r\n            <mat-form-field>\r\n              <mat-label>E-mail</mat-label>\r\n              <input matInput type=\"email\" formControlName=\"email\" />\r\n              <mat-icon matSuffix fontIcon=\"email\"></mat-icon>\r\n\r\n              <mat-error>\r\n                <app-error-field\r\n                  [control]=\"email\"\r\n                  [errorMessage]=\"validationField.email\"\r\n                ></app-error-field>\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <div>\r\n              <button type=\"submit\" mat-button [disabled]=\"isLoading\">\r\n                ถัดไป\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-step>\r\n\r\n        <mat-step\r\n          [stepControl]=\"formVerified\"\r\n          [editable]=\"true\"\r\n          [optional]=\"false\"\r\n        >\r\n          <form [formGroup]=\"formVerified\">\r\n            <ng-template matStepLabel>รหัสยืนยัน</ng-template>\r\n\r\n            <mat-form-field>\r\n              <mat-label>รหัสยืนยัน</mat-label>\r\n              <input matInput type=\"text\" formControlName=\"passwordResetCode\" />\r\n\r\n              @if(passwordResetCode.value.length != 0 &&\r\n              passwordResetCode.value.length != 8 && passwordResetCode.touched)\r\n              {\r\n              <mat-error>{{\r\n                validationField.passwordResetCode.length\r\n              }}</mat-error>\r\n              } @else {\r\n              <mat-error>\r\n                <app-error-field\r\n                  [control]=\"passwordResetCode\"\r\n                  [errorMessage]=\"validationField.passwordResetCode\"\r\n                ></app-error-field>\r\n              </mat-error>\r\n              }\r\n            </mat-form-field>\r\n\r\n            <div>\r\n              <button mat-button matStepperPrevious>ก่อนหน้า</button>\r\n              <button mat-button matStepperNext>ถัดไป</button>\r\n            </div>\r\n          </form>\r\n        </mat-step>\r\n\r\n        <mat-step [editable]=\"false\" [optional]=\"false\">\r\n          <form\r\n            [formGroup]=\"formResetPassword\"\r\n            (ngSubmit)=\"onSubmitResetPassword()\"\r\n          >\r\n            <ng-template matStepLabel>เปลี่ยนรหัสผ่าน</ng-template>\r\n\r\n            <mat-form-field>\r\n              <mat-label>รหัสผ่านใหม่</mat-label>\r\n              <input\r\n                [type]=\"hideNewPassword ? 'password' : 'text'\"\r\n                matInput\r\n                formControlName=\"newPassword\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <mat-icon\r\n                matSuffix\r\n                (click)=\"hideNewPassword = !hideNewPassword\"\r\n                >{{\r\n                  hideNewPassword ? \"visibility_off\" : \"visibility\"\r\n                }}</mat-icon\r\n              >\r\n\r\n              <mat-error>\r\n                <app-error-field\r\n                  [control]=\"newPassword\"\r\n                  [errorMessage]=\"validationField.newPassword\"\r\n                ></app-error-field>\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field>\r\n              <mat-label>ยินยันรหัสผ่านใหม่</mat-label>\r\n              <input\r\n                [type]=\"hideConfirmPassword ? 'password' : 'text'\"\r\n                matInput\r\n                formControlName=\"confirmPassword\"\r\n                autocomplete=\"off\"\r\n              />\r\n              <mat-icon\r\n                matSuffix\r\n                (click)=\"hideConfirmPassword = !hideConfirmPassword\"\r\n                >{{\r\n                  hideConfirmPassword ? \"visibility_off\" : \"visibility\"\r\n                }}</mat-icon\r\n              >\r\n\r\n              <mat-error>\r\n                <app-error-field\r\n                  [control]=\"confirmPassword\"\r\n                  [errorMessage]=\"validationField.confirmPassword\"\r\n                ></app-error-field>\r\n              </mat-error>\r\n            </mat-form-field>\r\n            <div>\r\n              <button mat-button matStepperPrevious>ก่อนหน้า</button>\r\n              <button type=\"submit\" mat-button>ตกลง</button>\r\n            </div>\r\n          </form>\r\n        </mat-step>\r\n      </mat-stepper>\r\n    </div>\r\n\r\n    <div class=\"login\">\r\n      <a routerLink=\"/login\">เข้าสู่ระบบ</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { TokenService } from '../../shared/services/token.service';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n  const router = inject(Router);\r\n  const tokenService = inject(TokenService);\r\n  const accessToken = tokenService.getAccessToken();\r\n\r\n  if (!accessToken || accessToken === 'undefined' || accessToken === 'null')\r\n    return true;\r\n\r\n  router.navigate(['/']);\r\n  return false;\r\n};\r\n","import * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, EventEmitter, Component, Input, HostBinding, Output, NgModule, forwardRef, Directive, HostListener } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_LANGUAGE = new InjectionToken(\"recaptcha-language\");\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_BASE_URL = new InjectionToken(\"recaptcha-base-url\");\n/** @deprecated Use `LOADER_OPTIONS` instead. See `RecaptchaLoaderOptions.onBeforeLoad` */\nconst RECAPTCHA_NONCE = new InjectionToken(\"recaptcha-nonce-tag\");\nconst RECAPTCHA_SETTINGS = new InjectionToken(\"recaptcha-settings\");\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken(\"recaptcha-v3-site-key\");\n/**\n * See the documentation for `RecaptchaLoaderOptions`.\n */\nconst RECAPTCHA_LOADER_OPTIONS = new InjectionToken(\"recaptcha-loader-options\");\nfunction loadScript(renderMode, onBeforeLoad, onLoaded, {\n  url,\n  lang,\n  nonce\n} = {}) {\n  window.ng2recaptchaloaded = () => {\n    onLoaded(grecaptcha);\n  };\n  const script = document.createElement(\"script\");\n  script.innerHTML = \"\";\n  const {\n    url: baseUrl,\n    nonce: onBeforeLoadNonce\n  } = onBeforeLoad(new URL(url || \"https://www.google.com/recaptcha/api.js\"));\n  baseUrl.searchParams.set(\"render\", renderMode === \"explicit\" ? renderMode : renderMode.key);\n  baseUrl.searchParams.set(\"onload\", \"ng2recaptchaloaded\");\n  baseUrl.searchParams.set(\"trustedtypes\", \"true\");\n  if (lang) {\n    baseUrl.searchParams.set(\"hl\", lang);\n  }\n  script.src = baseUrl.href;\n  const nonceValue = onBeforeLoadNonce || nonce;\n  if (nonceValue) {\n    script.setAttribute(\"nonce\", nonceValue);\n  }\n  script.async = true;\n  script.defer = true;\n  document.head.appendChild(script);\n}\nfunction newLoadScript({\n  v3SiteKey,\n  onBeforeLoad,\n  onLoaded\n}) {\n  const renderMode = v3SiteKey ? {\n    key: v3SiteKey\n  } : \"explicit\";\n  loader.loadScript(renderMode, onBeforeLoad, onLoaded);\n}\nconst loader = {\n  loadScript,\n  newLoadScript\n};\nfunction toNonNullObservable(subject) {\n  return subject.asObservable().pipe(filter(value => value !== null));\n}\nclass RecaptchaLoaderService {\n  /**\n   * @internal\n   * @nocollapse\n   */\n  static {\n    this.ready = null;\n  }\n  constructor(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId,\n  // eslint-disable-next-line deprecation/deprecation\n  language,\n  // eslint-disable-next-line deprecation/deprecation\n  baseUrl,\n  // eslint-disable-next-line deprecation/deprecation\n  nonce, v3SiteKey, options) {\n    this.platformId = platformId;\n    this.language = language;\n    this.baseUrl = baseUrl;\n    this.nonce = nonce;\n    this.v3SiteKey = v3SiteKey;\n    this.options = options;\n    const subject = this.init();\n    this.ready = subject ? toNonNullObservable(subject) : of();\n  }\n  /** @internal */\n  init() {\n    if (RecaptchaLoaderService.ready) {\n      return RecaptchaLoaderService.ready;\n    }\n    if (!isPlatformBrowser(this.platformId)) {\n      return undefined;\n    }\n    const subject = new BehaviorSubject(null);\n    RecaptchaLoaderService.ready = subject;\n    loader.newLoadScript({\n      v3SiteKey: this.v3SiteKey,\n      onBeforeLoad: url => {\n        if (this.options?.onBeforeLoad) {\n          return this.options.onBeforeLoad(url);\n        }\n        const newUrl = new URL(this.baseUrl ?? url);\n        if (this.language) {\n          newUrl.searchParams.set(\"hl\", this.language);\n        }\n        return {\n          url: newUrl,\n          nonce: this.nonce\n        };\n      },\n      onLoaded: recaptcha => {\n        let value = recaptcha;\n        if (this.options?.onLoaded) {\n          value = this.options.onLoaded(recaptcha);\n        }\n        subject.next(value);\n      }\n    });\n    return subject;\n  }\n  static {\n    this.ɵfac = function RecaptchaLoaderService_Factory(t) {\n      return new (t || RecaptchaLoaderService)(i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(RECAPTCHA_LANGUAGE, 8), i0.ɵɵinject(RECAPTCHA_BASE_URL, 8), i0.ɵɵinject(RECAPTCHA_NONCE, 8), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY, 8), i0.ɵɵinject(RECAPTCHA_LOADER_OPTIONS, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: RecaptchaLoaderService,\n      factory: RecaptchaLoaderService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaLoaderService, [{\n    type: Injectable\n  }], () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LANGUAGE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_BASE_URL]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_NONCE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_LOADER_OPTIONS]\n    }]\n  }], null);\n})();\nlet nextId = 0;\nclass RecaptchaComponent {\n  constructor(elementRef, loader, zone, settings) {\n    this.elementRef = elementRef;\n    this.loader = loader;\n    this.zone = zone;\n    this.id = `ngrecaptcha-${nextId++}`;\n    this.errorMode = \"default\";\n    this.resolved = new EventEmitter();\n    /**\n     * @deprecated `(error) output will be removed in the next major version. Use (errored) instead\n     */\n    // eslint-disable-next-line @angular-eslint/no-output-native\n    this.error = new EventEmitter();\n    this.errored = new EventEmitter();\n    if (settings) {\n      this.siteKey = settings.siteKey;\n      this.theme = settings.theme;\n      this.type = settings.type;\n      this.size = settings.size;\n      this.badge = settings.badge;\n    }\n  }\n  ngAfterViewInit() {\n    this.subscription = this.loader.ready.subscribe(grecaptcha => {\n      if (grecaptcha != null && grecaptcha.render instanceof Function) {\n        this.grecaptcha = grecaptcha;\n        this.renderRecaptcha();\n      }\n    });\n  }\n  ngOnDestroy() {\n    // reset the captcha to ensure it does not leave anything behind\n    // after the component is no longer needed\n    this.grecaptchaReset();\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  /**\n   * Executes the invisible recaptcha.\n   * Does nothing if component's size is not set to \"invisible\".\n   */\n  execute() {\n    if (this.size !== \"invisible\") {\n      return;\n    }\n    if (this.widget != null) {\n      void this.grecaptcha.execute(this.widget);\n    } else {\n      // delay execution of recaptcha until it actually renders\n      this.executeRequested = true;\n    }\n  }\n  reset() {\n    if (this.widget != null) {\n      if (this.grecaptcha.getResponse(this.widget)) {\n        // Only emit an event in case if something would actually change.\n        // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n        // on a non-resolved captcha.\n        this.resolved.emit(null);\n      }\n      this.grecaptchaReset();\n    }\n  }\n  /**\n   * ⚠️ Warning! Use this property at your own risk!\n   *\n   * While this member is `public`, it is not a part of the component's public API.\n   * The semantic versioning guarantees _will not be honored_! Thus, you might find that this property behavior changes in incompatible ways in minor or even patch releases.\n   * You are **strongly advised** against using this property.\n   * Instead, use more idiomatic ways to get reCAPTCHA value, such as `resolved` EventEmitter, or form-bound methods (ngModel, formControl, and the likes).å\n   */\n  get __unsafe_widgetValue() {\n    return this.widget != null ? this.grecaptcha.getResponse(this.widget) : null;\n  }\n  /** @internal */\n  expired() {\n    this.resolved.emit(null);\n  }\n  /** @internal */\n  onError(args) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.error.emit(args);\n    this.errored.emit(args);\n  }\n  /** @internal */\n  captchaResponseCallback(response) {\n    this.resolved.emit(response);\n  }\n  /** @internal */\n  grecaptchaReset() {\n    if (this.widget != null) {\n      this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n    }\n  }\n  /** @internal */\n  renderRecaptcha() {\n    // This `any` can be removed after @types/grecaptcha get updated\n    const renderOptions = {\n      badge: this.badge,\n      callback: response => {\n        this.zone.run(() => this.captchaResponseCallback(response));\n      },\n      \"expired-callback\": () => {\n        this.zone.run(() => this.expired());\n      },\n      sitekey: this.siteKey,\n      size: this.size,\n      tabindex: this.tabIndex,\n      theme: this.theme,\n      type: this.type\n    };\n    if (this.errorMode === \"handled\") {\n      renderOptions[\"error-callback\"] = (...args) => {\n        this.zone.run(() => this.onError(args));\n      };\n    }\n    this.widget = this.grecaptcha.render(this.elementRef.nativeElement, renderOptions);\n    if (this.executeRequested === true) {\n      this.executeRequested = false;\n      this.execute();\n    }\n  }\n  static {\n    this.ɵfac = function RecaptchaComponent_Factory(t) {\n      return new (t || RecaptchaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(RecaptchaLoaderService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(RECAPTCHA_SETTINGS, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: RecaptchaComponent,\n      selectors: [[\"re-captcha\"]],\n      hostVars: 1,\n      hostBindings: function RecaptchaComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id);\n        }\n      },\n      inputs: {\n        id: \"id\",\n        siteKey: \"siteKey\",\n        theme: \"theme\",\n        type: \"type\",\n        size: \"size\",\n        tabIndex: \"tabIndex\",\n        badge: \"badge\",\n        errorMode: \"errorMode\"\n      },\n      outputs: {\n        resolved: \"resolved\",\n        error: \"error\",\n        errored: \"errored\"\n      },\n      exportAs: [\"reCaptcha\"],\n      decls: 0,\n      vars: 0,\n      template: function RecaptchaComponent_Template(rf, ctx) {},\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaComponent, [{\n    type: Component,\n    args: [{\n      exportAs: \"reCaptcha\",\n      selector: \"re-captcha\",\n      template: ``\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: RecaptchaLoaderService\n  }, {\n    type: i0.NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [RECAPTCHA_SETTINGS]\n    }]\n  }], {\n    id: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: [\"attr.id\"]\n    }],\n    siteKey: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    badge: [{\n      type: Input\n    }],\n    errorMode: [{\n      type: Input\n    }],\n    resolved: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    errored: [{\n      type: Output\n    }]\n  });\n})();\nclass RecaptchaCommonModule {\n  static {\n    this.ɵfac = function RecaptchaCommonModule_Factory(t) {\n      return new (t || RecaptchaCommonModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaCommonModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaCommonModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaComponent],\n      exports: [RecaptchaComponent]\n    }]\n  }], null, null);\n})();\nclass RecaptchaModule {\n  static {\n    this.ɵfac = function RecaptchaModule_Factory(t) {\n      return new (t || RecaptchaModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [RecaptchaLoaderService],\n      imports: [RecaptchaCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RecaptchaComponent],\n      imports: [RecaptchaCommonModule],\n      providers: [RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\n\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nclass ReCaptchaV3Service {\n  constructor(zone, recaptchaLoader, siteKey) {\n    this.recaptchaLoader = recaptchaLoader;\n    this.zone = zone;\n    this.siteKey = siteKey;\n    this.init();\n  }\n  get onExecute() {\n    if (!this.onExecuteSubject) {\n      this.onExecuteSubject = new Subject();\n      this.onExecuteObservable = this.onExecuteSubject.asObservable();\n    }\n    return this.onExecuteObservable;\n  }\n  get onExecuteError() {\n    if (!this.onExecuteErrorSubject) {\n      this.onExecuteErrorSubject = new Subject();\n      this.onExecuteErrorObservable = this.onExecuteErrorSubject.asObservable();\n    }\n    return this.onExecuteErrorObservable;\n  }\n  /**\n   * Executes the provided `action` with reCAPTCHA v3 API.\n   * Use the emitted token value for verification purposes on the backend.\n   *\n   * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n   * https://developers.google.com/recaptcha/docs/v3.\n   *\n   * @param {string} action the action to execute\n   * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n   * The returned `Observable` completes immediately after emitting a value.\n   */\n  execute(action) {\n    const subject = new Subject();\n    if (!this.grecaptcha) {\n      if (!this.actionBacklog) {\n        this.actionBacklog = [];\n      }\n      this.actionBacklog.push([action, subject]);\n    } else {\n      this.executeActionWithSubject(action, subject);\n    }\n    return subject.asObservable();\n  }\n  /** @internal */\n  executeActionWithSubject(action, subject) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const onError = error => {\n      this.zone.run(() => {\n        subject.error(error);\n        if (this.onExecuteErrorSubject) {\n          // We don't know any better at this point, unfortunately, so have to resort to `any`\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          this.onExecuteErrorSubject.next({\n            action,\n            error\n          });\n        }\n      });\n    };\n    this.zone.runOutsideAngular(() => {\n      try {\n        this.grecaptcha.execute(this.siteKey, {\n          action\n        }).then(token => {\n          this.zone.run(() => {\n            subject.next(token);\n            subject.complete();\n            if (this.onExecuteSubject) {\n              this.onExecuteSubject.next({\n                action,\n                token\n              });\n            }\n          });\n        }, onError);\n      } catch (e) {\n        onError(e);\n      }\n    });\n  }\n  /** @internal */\n  init() {\n    this.recaptchaLoader.ready.subscribe(value => {\n      this.grecaptcha = value;\n      if (this.actionBacklog && this.actionBacklog.length > 0) {\n        this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n        this.actionBacklog = undefined;\n      }\n    });\n  }\n  static {\n    this.ɵfac = function ReCaptchaV3Service_Factory(t) {\n      return new (t || ReCaptchaV3Service)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(RecaptchaLoaderService), i0.ɵɵinject(RECAPTCHA_V3_SITE_KEY));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: ReCaptchaV3Service,\n      factory: ReCaptchaV3Service.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReCaptchaV3Service, [{\n    type: Injectable\n  }], () => [{\n    type: i0.NgZone\n  }, {\n    type: RecaptchaLoaderService\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [RECAPTCHA_V3_SITE_KEY]\n    }]\n  }], null);\n})();\nclass RecaptchaV3Module {\n  static {\n    this.ɵfac = function RecaptchaV3Module_Factory(t) {\n      return new (t || RecaptchaV3Module)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaV3Module\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [ReCaptchaV3Service, RecaptchaLoaderService]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaV3Module, [{\n    type: NgModule,\n    args: [{\n      providers: [ReCaptchaV3Service, RecaptchaLoaderService]\n    }]\n  }], null, null);\n})();\nclass RecaptchaValueAccessorDirective {\n  constructor(host) {\n    this.host = host;\n    this.requiresControllerReset = false;\n  }\n  writeValue(value) {\n    if (!value) {\n      this.host.reset();\n    } else {\n      // In this case, it is most likely that a form controller has requested to write a specific value into the component.\n      // This isn't really a supported case - reCAPTCHA values are single-use, and, in a sense, readonly.\n      // What this means is that the form controller has recaptcha control state of X, while reCAPTCHA itself can't \"restore\"\n      // to that state. In order to make form controller aware of this discrepancy, and to fix the said misalignment,\n      // we'll be telling the controller to \"reset\" the value back to null.\n      if (this.host.__unsafe_widgetValue !== value && Boolean(this.host.__unsafe_widgetValue) === false) {\n        this.requiresControllerReset = true;\n      }\n    }\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n    if (this.requiresControllerReset) {\n      this.requiresControllerReset = false;\n      this.onChange(null);\n    }\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  onResolve($event) {\n    if (this.onChange) {\n      this.onChange($event);\n    }\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n  static {\n    this.ɵfac = function RecaptchaValueAccessorDirective_Factory(t) {\n      return new (t || RecaptchaValueAccessorDirective)(i0.ɵɵdirectiveInject(RecaptchaComponent));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: RecaptchaValueAccessorDirective,\n      selectors: [[\"re-captcha\", \"formControlName\", \"\"], [\"re-captcha\", \"formControl\", \"\"], [\"re-captcha\", \"ngModel\", \"\"]],\n      hostBindings: function RecaptchaValueAccessorDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"resolved\", function RecaptchaValueAccessorDirective_resolved_HostBindingHandler($event) {\n            return ctx.onResolve($event);\n          });\n        }\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaValueAccessorDirective, [{\n    type: Directive,\n    args: [{\n      providers: [{\n        multi: true,\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => RecaptchaValueAccessorDirective)\n      }],\n      selector: \"re-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]\"\n    }]\n  }], () => [{\n    type: RecaptchaComponent\n  }], {\n    onResolve: [{\n      type: HostListener,\n      args: [\"resolved\", [\"$event\"]]\n    }]\n  });\n})();\nclass RecaptchaFormsModule {\n  static {\n    this.ɵfac = function RecaptchaFormsModule_Factory(t) {\n      return new (t || RecaptchaFormsModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: RecaptchaFormsModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [FormsModule, RecaptchaCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RecaptchaFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [RecaptchaValueAccessorDirective],\n      exports: [RecaptchaValueAccessorDirective],\n      imports: [FormsModule, RecaptchaCommonModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_LOADER_OPTIONS, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective };\n","export const LOGIN = {\r\n  validationField: {\r\n    email: {\r\n      required: 'กรุณาระบุ E-mail',\r\n      email: 'กรุณาระบุ E-mail ให้ถูกต้อง (example@gmail.com)',\r\n    },\r\n\r\n    password: {\r\n      required: 'กรุณาระบุ Password',\r\n    },\r\n  },\r\n};\r\n","import { Component, OnDestroy, OnInit, inject } from '@angular/core';\r\nimport { FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Subscription, finalize } from 'rxjs';\r\nimport { AuthApiService } from '../../services/auth-api.service';\r\nimport { ReCaptchaV3Service } from 'ng-recaptcha';\r\nimport { LOGIN } from '../../constants/login.constant';\r\nimport { LoginRequest } from '../../models/login.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  private formBuilder = inject(FormBuilder);\r\n  private router = inject(Router);\r\n  private authApiService = inject(AuthApiService);\r\n  private recaptchaV3Service = inject(ReCaptchaV3Service);\r\n\r\n  validationField = LOGIN.validationField;\r\n  isLoading: boolean = false;\r\n  hidePassword: boolean = true;\r\n  form = this.initForm();\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n\r\n    this.subscription = this.recaptchaV3Service\r\n      .execute('importantAction')\r\n      .subscribe((token) => this.recaptcha.setValue(token));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.form.invalid) return;\r\n\r\n    const payload: LoginRequest = { ...this.form.getRawValue() };\r\n    this.isLoading = true;\r\n    this.authApiService\r\n      .login(payload)\r\n      .pipe(finalize(() => (this.isLoading = false)))\r\n      .subscribe((res) => this.router.navigate(['/']));\r\n  }\r\n\r\n  get email(): FormControl<string> {\r\n    return this.form.controls['email'];\r\n  }\r\n\r\n  get password(): FormControl<string> {\r\n    return this.form.controls['password'];\r\n  }\r\n\r\n  get recaptcha(): FormControl<string> {\r\n    return this.form.controls['recaptcha'];\r\n  }\r\n\r\n  private initForm() {\r\n    return this.formBuilder.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]],\r\n      recaptcha: ['', [Validators.required]],\r\n    });\r\n  }\r\n}\r\n","<div class=\"login-wrapper\">\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"dark-theme\">\r\n    @if (isLoading) {\r\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n    }\r\n\r\n    <img src=\"assets/images/logo-bsru.png\" alt=\"logo\" />\r\n    <h1>ระบบคลังพัสดุ</h1>\r\n    <mat-form-field>\r\n      <mat-label>E-mail</mat-label>\r\n      <input matInput type=\"email\" formControlName=\"email\" />\r\n      <mat-icon matSuffix fontIcon=\"email\"></mat-icon>\r\n\r\n      <mat-error>\r\n        <app-error-field\r\n          [control]=\"email\"\r\n          [errorMessage]=\"validationField.email\"\r\n        ></app-error-field>\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field>\r\n      <mat-label>รหัสผ่าน</mat-label>\r\n      <input\r\n        matInput\r\n        [type]=\"hidePassword ? 'password' : 'text'\"\r\n        type=\"password\"\r\n        formControlName=\"password\"\r\n        autocomplete=\"false\"\r\n      />\r\n      <mat-icon matSuffix (click)=\"hidePassword = !hidePassword\">{{\r\n        hidePassword ? \"visibility_off\" : \"visibility\"\r\n      }}</mat-icon>\r\n\r\n      <mat-error>\r\n        <app-error-field\r\n          [control]=\"password\"\r\n          [errorMessage]=\"validationField.password\"\r\n        ></app-error-field>\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <button type=\"submit\" matRipple [disabled]=\"isLoading\">\r\n      <span class=\"text\">เข้าสู่ระบบ</span>\r\n    </button>\r\n\r\n    <div class=\"forgot-password\">\r\n      <a routerLink=\"./forgot-password\">ลืมรหัสผ่าน ?</a>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { authGuard } from './guards/auth.guard';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\r\nimport { AuthComponent } from './auth.component';\r\n\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      { path: '', component: LoginComponent, canActivate: [authGuard] },\r\n      { path: 'forgot-password', component: ForgotPasswordComponent },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n","import { NgModule, Provider } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { AuthComponent } from './auth.component';\r\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\r\nimport { AuthRoutingModule } from './auth.routes';\r\nimport { CoreModule } from '../../core/core.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { RECAPTCHA_V3_SITE_KEY, RecaptchaV3Module } from 'ng-recaptcha';\r\nimport { LoginComponent } from './components/login/login.component';\r\n\r\nconst siteKey = environment.recaptcha.siteKey;\r\nconst provideRecaptcha: Provider = [\r\n  { provide: RECAPTCHA_V3_SITE_KEY, useValue: siteKey },\r\n];\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent, LoginComponent, ForgotPasswordComponent],\r\n  imports: [AuthRoutingModule, CoreModule, SharedModule, RecaptchaV3Module],\r\n  providers: [provideRecaptcha],\r\n})\r\nexport class AuthModule {}\r\n"],"mappings":"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","names":["loader","grecaptcha","siteKey"],"x_google_ignoreList":[6]}